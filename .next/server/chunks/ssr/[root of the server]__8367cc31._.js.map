{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Programming/sportsexcitement-react/src/lib/db/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n// Environment variables\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\n// Create a mock client for development when env vars are not available\r\nconst createMockClient = () => {\r\n  console.warn('Supabase URL and/or Anon Key not found. Using mock client.');\r\n  \r\n  return {\r\n    auth: {\r\n      signInWithPassword: async () => ({ data: { session: null }, error: null }),\r\n      signUp: async () => ({ data: { session: null }, error: null }),\r\n      signOut: async () => ({ error: null }),\r\n      resetPasswordForEmail: async () => ({ error: null }),\r\n      updateUser: async () => ({ error: null }),\r\n      getSession: async () => ({ data: { session: null }, error: null })\r\n    }\r\n  };\r\n};\r\n\r\n// Export either a real Supabase client or a mock client\r\nexport const supabase = supabaseUrl && supabaseAnonKey\r\n  ? createClient(supabaseUrl, supabaseAnonKey, { auth: { persistSession: false } })\r\n  : createMockClient(); "],"names":[],"mappings":";;;AAAA;;AAEA,wBAAwB;AACxB,MAAM;AACN,MAAM;AAEN,uEAAuE;AACvE,MAAM,mBAAmB;IACvB,QAAQ,IAAI,CAAC;IAEb,OAAO;QACL,MAAM;YACJ,oBAAoB,UAAY,CAAC;oBAAE,MAAM;wBAAE,SAAS;oBAAK;oBAAG,OAAO;gBAAK,CAAC;YACzE,QAAQ,UAAY,CAAC;oBAAE,MAAM;wBAAE,SAAS;oBAAK;oBAAG,OAAO;gBAAK,CAAC;YAC7D,SAAS,UAAY,CAAC;oBAAE,OAAO;gBAAK,CAAC;YACrC,uBAAuB,UAAY,CAAC;oBAAE,OAAO;gBAAK,CAAC;YACnD,YAAY,UAAY,CAAC;oBAAE,OAAO;gBAAK,CAAC;YACxC,YAAY,UAAY,CAAC;oBAAE,MAAM;wBAAE,SAAS;oBAAK;oBAAG,OAAO;gBAAK,CAAC;QACnE;IACF;AACF;AAGO,MAAM,WAAW,uCACpB,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;IAAE,MAAM;QAAE,gBAAgB;IAAM;AAAE","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Programming/sportsexcitement-react/src/lib/Redux/auth/authActions.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { \r\n  LoginFormData, \r\n  RegisterFormData, \r\n  ResetPasswordData \r\n} from '@/hooks/auth/IAuth';\r\nimport { supabase } from '@/lib/db/supabaseClient';\r\nimport { IAuthActions } from '@/lib/Redux/auth/IAuthActions';\r\n\r\n// Auth Actions Implementation\r\nexport const loginAction = createAsyncThunk(\r\n  'auth/login',\r\n  async (credentials: LoginFormData, { rejectWithValue }) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email: credentials.email,\r\n        password: credentials.password\r\n      });\r\n      \r\n      if (error) throw new Error(error.message);\r\n      \r\n      return {\r\n        idToken: data.session?.access_token || null,\r\n        refreshToken: data.session?.refresh_token || null\r\n      };\r\n    } catch (error: any) {\r\n      return rejectWithValue(error.message as string);\r\n    }\r\n  }\r\n);\r\n\r\nexport const registerAction = createAsyncThunk(\r\n  'auth/register',\r\n  async (userData: RegisterFormData, { rejectWithValue }) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email: userData.email,\r\n        password: userData.password\r\n      });\r\n      \r\n      if (error) throw new Error(error.message);\r\n      \r\n      return {\r\n        idToken: data.session?.access_token || null,\r\n        refreshToken: data.session?.refresh_token || null\r\n      };\r\n    } catch (error: any) {\r\n      return rejectWithValue(error.message as string);\r\n    }\r\n  }\r\n);\r\n\r\nexport const logoutAction = createAsyncThunk(\r\n  'auth/logout',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw new Error(error.message);\r\n      return null;\r\n    } catch (error: any) {\r\n      return rejectWithValue(error.message as string);\r\n    }\r\n  }\r\n);\r\n\r\nexport const resetPasswordRequestAction = createAsyncThunk(\r\n  'auth/resetPasswordRequest',\r\n  async (email: string, { rejectWithValue }) => {\r\n    try {\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: 'http://localhost:3000/reset-password'\r\n      });\r\n      \r\n      if (error) throw new Error(error.message);\r\n      return null;\r\n    } catch (error: any) {\r\n      return rejectWithValue(error.message as string);\r\n    }\r\n  }\r\n);\r\n\r\nexport const resetPasswordAction = createAsyncThunk(\r\n  'auth/resetPassword',\r\n  async (data: ResetPasswordData, { rejectWithValue }) => {\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({\r\n        password: data.newPassword\r\n      });\r\n      \r\n      if (error) throw new Error(error.message);\r\n      \r\n      // After password update, we need to get the session\r\n      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\r\n      \r\n      if (sessionError) throw new Error(sessionError.message);\r\n      \r\n      return {\r\n        idToken: sessionData.session?.access_token || null,\r\n        refreshToken: sessionData.session?.refresh_token || null\r\n      };\r\n    } catch (error: any) {\r\n      return rejectWithValue(error.message as string);\r\n    }\r\n  }\r\n);\r\n\r\n// Export actions as an object that implements IAuthActions\r\nexport const authActions: IAuthActions = {\r\n  loginAction,\r\n  registerAction,\r\n  logoutAction,\r\n  resetPasswordRequestAction,\r\n  resetPasswordAction\r\n}; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Programming/sportsexcitement-react/src/lib/Redux/auth/authSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { AuthState } from '@/hooks/auth/IAuth';\r\nimport { \r\n  loginAction, \r\n  registerAction, \r\n  logoutAction, \r\n  resetPasswordRequestAction, \r\n  resetPasswordAction \r\n} from './authActions';\r\n\r\nconst initialState: AuthState = {\r\n  idToken: null,\r\n  refreshToken: null,\r\n  loading: false,\r\n  error: null,\r\n  sessionId: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginAction.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginAction.fulfilled, (state, action: any) => {\r\n        state.loading = false;\r\n        state.idToken = action.payload.idToken;\r\n        state.refreshToken = action.payload.refreshToken;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginAction.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(registerAction.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(registerAction.fulfilled, (state, action: any) => {\r\n        state.loading = false;\r\n        state.idToken = action.payload.idToken;\r\n        state.refreshToken = action.payload.refreshToken;\r\n        state.error = null;\r\n      })\r\n      .addCase(registerAction.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(logoutAction.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(logoutAction.fulfilled, (state) => {\r\n        state.loading = false;\r\n        state.idToken = null;\r\n        state.refreshToken = null;\r\n        state.error = null;\r\n      })\r\n      .addCase(logoutAction.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(resetPasswordRequestAction.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(resetPasswordRequestAction.fulfilled, (state) => {\r\n        state.loading = false;\r\n        state.error = null;\r\n      })\r\n      .addCase(resetPasswordRequestAction.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(resetPasswordAction.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(resetPasswordAction.fulfilled, (state, action: any) => {\r\n        state.loading = false;\r\n        state.idToken = action.payload.idToken;\r\n        state.refreshToken = action.payload.refreshToken;\r\n        state.error = null;\r\n      })\r\n      .addCase(resetPasswordAction.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\nexport { \r\n  loginAction, \r\n  registerAction, \r\n  logoutAction, \r\n  resetPasswordRequestAction, \r\n  resetPasswordAction \r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Programming/sportsexcitement-react/src/lib/Redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '@/lib/Redux/auth/authSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport type { TypedUseSelectorHook } from 'react-redux';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector as TypedUseSelectorHook<RootState>;\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AAWA;;;AATO,MAAM,QAAQ,CAAA,GAAA,2LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,MAAM,wJAAA,CAAA,UAAW;IACnB;AACF;;AASO,MAAM,iBAAiB,IAAM,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD;AACvC,MAAM,iBAAkD,yJAAA,CAAA,cAAW","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Programming/sportsexcitement-react/src/lib/Redux/providers.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nexport function Providers({ children }: { children: React.ReactNode }) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBAAO,8OAAC,yJAAA,CAAA,WAAQ;QAAC,OAAO,4HAAA,CAAA,QAAK;kBAAG;;;;;;AAClC","debugId":null}}]
}